AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  MyTS SAM Template

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - qa
      - prod
    Description: Environment for this stack of resources
  LambdaKMSKey:
    Type: String
    Default: 7be5815a-d6db-48b6-9bb9-cfe378eb9581
  GWSAuthURI:
    Type: String
    Default: AQICAHinuodbrDEQ84oE7JkYOE8yIO2JCov6dMifb/s5OYy5lwGrmAIoerSagA2lfy2vs9FSAAAAuDCBtQYJKoZIhvcNAQcGoIGnMIGkAgEAMIGeBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDMtqu88NZT6w2LXU0wIBEIBxrOi8F7wq8JsFWHuhvVM5UG2MnxnWOoc0HE70slHpPdDC4mz6ypMH2SXjiKTZyDdogLOrhk7j9JULrVLJHE7KtCPMloG4806vb0CcpAScrZciPWt0Hg/m94YrjAzeLj/28e+z+53aoA6mnuzIxZfql48=
  GWSAuthorization:
    Type: String
    Default: AQICAHinuodbrDEQ84oE7JkYOE8yIO2JCov6dMifb/s5OYy5lwEHh9O1waN82hrmy29lYU52AAAAyTCBxgYJKoZIhvcNAQcGoIG4MIG1AgEAMIGvBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDIctKeg45VxeUjZg+gIBEICBgXA5bNOFSRJdqIqwm+L7gxLwjo9my8nQFTv39HwkXImzR30WeW/a/1XgYow12L4xDgUP5W8kH9iDRJY8C/fuCBcwUAVyX7n2S7c7flNNAR5MqDG0XAa2ShIjd/08+6aJkc3eOhO2OBkEnRq1cUM1R89qL1k8gPFN5ruw4+uQutCSDw==
  TSIJwtSharedSecret:
    Type: String
    Default: AQICAHinuodbrDEQ84oE7JkYOE8yIO2JCov6dMifb/s5OYy5lwE9ApHK/h6hTI2mJUclNxt1AAAAjzCBjAYJKoZIhvcNAQcGoH8wfQIBADB4BgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDBMSJUxyerSxYlQhewIBEIBLGpVIiVq9Iq8L1BRBC5a9cbFRgEaRPymYxfLM9P9odXlbY8I5pMX/zz0yf+Kxtc+y5zPXjG2v+8QGPwPG+FDx8/TuDukBNun4+U4C
  
Globals:
  Function:
    Runtime: go1.x
    Handler: main
    Environment:
      Variables:
        Environment: !Ref Environment
        KeyServerURL: https://zon9zfmig8.execute-api.us-east-1.amazonaws.com/dev
    Timeout: 5

Resources:

  ##### API Gateway configuration

  MyTSServerlessAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyTS Serverless
      StageName: !Ref Environment
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: "MyTS Serverless"
        basePath: "/dev"
        schemes:
          - "https"
        securityDefinitions:
          validateBlacklistAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"

            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              type: "token"
              authorizerResultTtlInSeconds: 0
              authorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ValidateBlacklistFunction.Arn}/invocations

        paths:
          /keys:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPublicKeysFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /keys/{keyID}:
            get:
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetPublicKeyFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /login:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ValidateIdentityFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /teach/{proxy+}:
            x-amazon-apigateway-any-method:
              security:
                - validateBlacklistAuthorizer: []
              produces:
                - "application/json"
              parameters:
                - name: "proxy"
                  in: "path"
                  required: true
                  type: "string"
              responses: {}
              x-amazon-apigateway-integration:
                uri: "https://www.google.com/{proxy}"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.path.proxy: "method.request.path.proxy"
                passthroughBehavior: "when_no_match"
                httpMethod: "ANY"
                cacheNamespace: "h19sfg"
                cacheKeyParameters:
                  - "method.request.path.proxy"
                type: "http_proxy"
          /token/verify:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TempCheckTokenFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /token/blacklist:
            put:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BlacklistUserFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
          /token/exchange:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ExchangeTokenFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                type: "aws_proxy"
            options:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"

  ##### Grant API Gateway permission to invoke lambdas

  APIValidateIdentityFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyTSServerlessAPI
      - ValidateIdentityFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ValidateIdentityFunction
      Principal: apigateway.amazonaws.com

  APIExchangeTokenPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyTSServerlessAPI
      - ExchangeTokenFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ExchangeTokenFunction
      Principal: apigateway.amazonaws.com

  APIGetPublicKeysPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyTSServerlessAPI
      - GetPublicKeysFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetPublicKeysFunction
      Principal: apigateway.amazonaws.com

  APIGetPublicKeyPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyTSServerlessAPI
      - GetPublicKeyFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetPublicKeyFunction
      Principal: apigateway.amazonaws.com

  APIBlacklistUserPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyTSServerlessAPI
      - BlacklistUserFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BlacklistUserFunction
      Principal: apigateway.amazonaws.com
  
  APIValidateBlacklistPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyTSServerlessAPI
      - ValidateBlacklistFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ValidateBlacklistFunction
      Principal: apigateway.amazonaws.com

  APITempCheckTokenPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - MyTSServerlessAPI
      - TempCheckTokenFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TempCheckTokenFunction
      Principal: apigateway.amazonaws.com

  ##### Lambda configuration

  ValidateIdentityFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cmd/authentication/validateIdentity
      Policies:
        - KMSDecryptPolicy:
            KeyId: !Ref LambdaKMSKey
        - DynamoDBReadPolicy:
            TableName: !Sub "${Environment}.auth.KeyStore"
      Environment:
        Variables:
          GWSAuthURI: !Ref GWSAuthURI
          GWSAuthorization: !Ref GWSAuthorization
          TSIJwtSharedSecret: !Ref TSIJwtSharedSecret

  ExchangeTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cmd/authentication/exchangeToken
      Policies:
        - KMSDecryptPolicy:
            KeyId: !Ref LambdaKMSKey
        - DynamoDBReadPolicy:
            TableName: !Sub "${Environment}.auth.KeyStore"
      Environment:
        Variables:
          TSIJwtSharedSecret: !Ref TSIJwtSharedSecret

  GetPublicKeysFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cmd/authentication/getPublicKeys
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${Environment}.auth.KeyStore"

  GetPublicKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cmd/authentication/getPublicKey
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${Environment}.auth.KeyStore"

  BlacklistUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cmd/authentication/blacklistUser
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub "${Environment}.auth.TokenBlacklist"

  ValidateBlacklistFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cmd/authentication/validateBlacklist
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${Environment}.auth.TokenBlacklist"
  TempCheckTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cmd/temp/checkToken
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Sub "${Environment}.auth.KeyStore"
